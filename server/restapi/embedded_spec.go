// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Internal DownToMeet API",
    "version": "1.0.0"
  },
  "paths": {
    "/hello": {
      "get": {
        "description": "If id is \"error\", an error response is returned.",
        "summary": "Get a hello world message",
        "responses": {
          "200": {
            "description": "successful hello world response",
            "schema": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "A sample parameter.",
          "name": "id",
          "in": "query"
        }
      ]
    },
    "/user/facebook/redirect": {
      "get": {
        "description": "If authentication fails, the user is not logged in.",
        "summary": "Facebook OAuth redirect",
        "parameters": [
          {
            "type": "string",
            "description": "Authorization code from Facebook",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "303": {
            "description": "Redirect to home page.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Redirect URL"
              }
            }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "description": "If user is not logged in, an error response is returned.",
        "summary": "Get the current user's information",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "If specified user does not exist, an error is returned.",
        "summary": "Get the specified user's information",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "description": "If specified user does not exist or current user is not the specified\nuser, an error is returned.\n",
        "summary": "Patch the specified user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the desired user",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "coordinates": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "maximum": 90,
          "minimum": -90
        },
        "lon": {
          "type": "number",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "meetupID": {
      "type": "string"
    },
    "user": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "attending": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        },
        "contactInfo": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/coordinates"
        },
        "id": {
          "$ref": "#/definitions/userID"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "ownedMeetups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        },
        "pendingApproval": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        }
      }
    },
    "userID": {
      "type": "string"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Internal DownToMeet API",
    "version": "1.0.0"
  },
  "paths": {
    "/hello": {
      "get": {
        "description": "If id is \"error\", an error response is returned.",
        "summary": "Get a hello world message",
        "responses": {
          "200": {
            "description": "successful hello world response",
            "schema": {
              "type": "object",
              "properties": {
                "hello": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "generic error response",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "A sample parameter.",
          "name": "id",
          "in": "query"
        }
      ]
    },
    "/user/facebook/redirect": {
      "get": {
        "description": "If authentication fails, the user is not logged in.",
        "summary": "Facebook OAuth redirect",
        "parameters": [
          {
            "type": "string",
            "description": "Authorization code from Facebook",
            "name": "code",
            "in": "query"
          }
        ],
        "responses": {
          "303": {
            "description": "Redirect to home page.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Redirect URL"
              }
            }
          }
        }
      }
    },
    "/user/me": {
      "get": {
        "description": "If user is not logged in, an error response is returned.",
        "summary": "Get the current user's information",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "description": "If specified user does not exist, an error is returned.",
        "summary": "Get the specified user's information",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "patch": {
        "description": "If specified user does not exist or current user is not the specified\nuser, an error is returned.\n",
        "summary": "Patch the specified user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the desired user",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "coordinates": {
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "maximum": 90,
          "minimum": -90
        },
        "lon": {
          "type": "number",
          "maximum": 180,
          "minimum": -180
        }
      }
    },
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "meetupID": {
      "type": "string"
    },
    "user": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "attending": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        },
        "contactInfo": {
          "type": "string"
        },
        "coordinates": {
          "$ref": "#/definitions/coordinates"
        },
        "id": {
          "$ref": "#/definitions/userID"
        },
        "interests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "ownedMeetups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        },
        "pendingApproval": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/meetupID"
          }
        }
      }
    },
    "userID": {
      "type": "string"
    }
  }
}`))
}
