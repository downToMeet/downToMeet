// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"go.timothygu.me/downtomeet/server/models"
)

// PatchUserIDOKCode is the HTTP code returned for type PatchUserIDOK
const PatchUserIDOKCode int = 200

/*PatchUserIDOK OK

swagger:response patchUserIdOK
*/
type PatchUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.User `json:"body,omitempty"`
}

// NewPatchUserIDOK creates PatchUserIDOK with default headers values
func NewPatchUserIDOK() *PatchUserIDOK {

	return &PatchUserIDOK{}
}

// WithPayload adds the payload to the patch user Id o k response
func (o *PatchUserIDOK) WithPayload(payload *models.User) *PatchUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch user Id o k response
func (o *PatchUserIDOK) SetPayload(payload *models.User) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUserIDForbiddenCode is the HTTP code returned for type PatchUserIDForbidden
const PatchUserIDForbiddenCode int = 403

/*PatchUserIDForbidden Forbidden

swagger:response patchUserIdForbidden
*/
type PatchUserIDForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchUserIDForbidden creates PatchUserIDForbidden with default headers values
func NewPatchUserIDForbidden() *PatchUserIDForbidden {

	return &PatchUserIDForbidden{}
}

// WithPayload adds the payload to the patch user Id forbidden response
func (o *PatchUserIDForbidden) WithPayload(payload *models.Error) *PatchUserIDForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch user Id forbidden response
func (o *PatchUserIDForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUserIDForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUserIDNotFoundCode is the HTTP code returned for type PatchUserIDNotFound
const PatchUserIDNotFoundCode int = 404

/*PatchUserIDNotFound Not found

swagger:response patchUserIdNotFound
*/
type PatchUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchUserIDNotFound creates PatchUserIDNotFound with default headers values
func NewPatchUserIDNotFound() *PatchUserIDNotFound {

	return &PatchUserIDNotFound{}
}

// WithPayload adds the payload to the patch user Id not found response
func (o *PatchUserIDNotFound) WithPayload(payload *models.Error) *PatchUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch user Id not found response
func (o *PatchUserIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PatchUserIDInternalServerErrorCode is the HTTP code returned for type PatchUserIDInternalServerError
const PatchUserIDInternalServerErrorCode int = 500

/*PatchUserIDInternalServerError Internal server error

swagger:response patchUserIdInternalServerError
*/
type PatchUserIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchUserIDInternalServerError creates PatchUserIDInternalServerError with default headers values
func NewPatchUserIDInternalServerError() *PatchUserIDInternalServerError {

	return &PatchUserIDInternalServerError{}
}

// WithPayload adds the payload to the patch user Id internal server error response
func (o *PatchUserIDInternalServerError) WithPayload(payload *models.Error) *PatchUserIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch user Id internal server error response
func (o *PatchUserIDInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchUserIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
