// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchUserIDHandlerFunc turns a function with the right signature into a patch user ID handler
type PatchUserIDHandlerFunc func(PatchUserIDParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchUserIDHandlerFunc) Handle(params PatchUserIDParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PatchUserIDHandler interface for that can handle valid patch user ID params
type PatchUserIDHandler interface {
	Handle(PatchUserIDParams, interface{}) middleware.Responder
}

// NewPatchUserID creates a new http.Handler for the patch user ID operation
func NewPatchUserID(ctx *middleware.Context, handler PatchUserIDHandler) *PatchUserID {
	return &PatchUserID{Context: ctx, Handler: handler}
}

/*PatchUserID swagger:route PATCH /user/{id} patchUserId

Patch the specified user

If specified user does not exist or current user is not the specified
user, an error is returned.


*/
type PatchUserID struct {
	Context *middleware.Context
	Handler PatchUserIDHandler
}

func (o *PatchUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchUserIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
