// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetSetCookieHandlerFunc turns a function with the right signature into a get set cookie handler
type GetSetCookieHandlerFunc func(GetSetCookieParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSetCookieHandlerFunc) Handle(params GetSetCookieParams) middleware.Responder {
	return fn(params)
}

// GetSetCookieHandler interface for that can handle valid get set cookie params
type GetSetCookieHandler interface {
	Handle(GetSetCookieParams) middleware.Responder
}

// NewGetSetCookie creates a new http.Handler for the get set cookie operation
func NewGetSetCookie(ctx *middleware.Context, handler GetSetCookieHandler) *GetSetCookie {
	return &GetSetCookie{Context: ctx, Handler: handler}
}

/*GetSetCookie swagger:route GET /set-cookie getSetCookie

Set cookie session

This is a sample endpoint that simulates the action of logging in. After
a successful call to this endpoint, one should then be able to go to
/restricted and receive a message about who they are logged in as.

This is a dummy endpoint for testing purposes. It should be removed soon.


*/
type GetSetCookie struct {
	Context *middleware.Context
	Handler GetSetCookieHandler
}

func (o *GetSetCookie) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSetCookieParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
