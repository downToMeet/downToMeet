package nonce

import (
	"math/rand"
	"sync"
	"time"
)

const (
	stateExpiry    = 30 * time.Minute
	clearThreshold = 128
)

// Generator creates randomly generated 16-byte ASCII nonces. The nonce only has
// Base32 characters, which are a subset of all alphanumeric characters.
// Each nonce is only valid for 30 minutes; beyond that, and VerifyState will
// return false.
type Generator struct {
	rand        *rand.Rand
	m           map[string]time.Time
	mu          sync.Mutex
	lastCleaned int
}

// NewGenerator creates a new Generator from the given rand.Source.
func NewGenerator(src rand.Source) *Generator {
	return &Generator{
		rand: rand.New(src),
		m:    make(map[string]time.Time),
	}
}

func (g *Generator) clean() {
	if len(g.m)-g.lastCleaned >= clearThreshold {
		for k, expiry := range g.m {
			if time.Now().After(expiry) {
				delete(g.m, k)
			}
		}
		g.lastCleaned = len(g.m)
	}
}

// NewState creates a new nonce and remembers it for later retrieval.
func (g *Generator) NewState(stateLen int) string {
	g.mu.Lock()
	defer g.mu.Unlock()
	defer g.clean()

	for {
		state := RandomAlphanumerics(g.rand, stateLen)
		if _, ok := g.m[state]; !ok {
			g.m[state] = time.Now().Add(stateExpiry)
			return state
		}
	}
}

// VerifyState checks whether the provided state was generated by this
// Generator, and if so, whether it is still valid.
func (g *Generator) VerifyState(state string) bool {
	g.mu.Lock()
	defer g.mu.Unlock()
	defer g.clean()

	expiry, ok := g.m[state]
	if !ok {
		return false
	}
	delete(g.m, state)
	if time.Now().After(expiry) {
		return false
	}
	return true
}
