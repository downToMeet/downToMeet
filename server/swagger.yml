swagger: "2.0"
info:
  title: Internal DownToMeet API
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http

definitions:
  error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
  userID:
    type: string
  meetupID:
    type: string
  tagID:
    type: string
  coordinates:
    type: object
    required:
      - lat
      - lon
    properties:
      lat:
        type: number
        minimum: -90
        maximum: 90
      lon:
        type: number
        minimum: -180
        maximum: 180
  location:
    type: object
    properties:
      name:
        type: string
      coordinates:
        $ref: "#/definitions/coordinates"
      url:
        type: string
  user:
    type: object
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/userID"
      name:
        type: string
      email:
        type: string
      profilePic:
        type: string
      joinDate:
        type: string
        format: date-time
      connections:
        type: array
        x-omitempty: true
        items:
          type: string
      interests:
        type: array
        x-omitempty: true
        items:
          type: string
      location:
        x-omitempty: true
        $ref: "#/definitions/coordinates"
      pendingApproval:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/meetupID"
      attending:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/meetupID"
      ownedMeetups:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/meetupID"
      contactInfo:
        type: string
        x-omitempty: true
  meetup:
    type: object
    required:
      - id
    properties:
      id:
        $ref: "#/definitions/meetupID"
      title:
        type: string
      location:
        $ref: "#/definitions/location"
      time:
        type: string
        format: date-time
      description:
        type: string
      tags:
        type: array
        items:
          type: string
      minCapacity:
        type: integer
        minimum: 0
      maxCapacity:
        type: integer
        minimum: 0
      owner:
        $ref: "#/definitions/userID"
      attendees:
        type: array
        items:
          $ref: "#/definitions/userID"
      pendingAttendees:
        type: array
        items:
          $ref: "#/definitions/userID"
      rejected:
        type: boolean
      canceled:
        type: boolean
  meetupRequestBody:
    type: object
    properties:
      title:
        type: string
      time:
        type: string
        format: date-time
      description:
        type: string
      location:
        $ref: "#/definitions/location"
      tags:
        type: array
        items:
          type: string
      minCapacity:
        type: integer
        minimum: 0
      maxCapacity:
        type: integer
        minimum: 0
  attendeeStatus:
    type: string
    "default": none
    "enum":
      - attending
      - pending
      - rejected
      - none
  patchMeetupAttendeeBody:
    type: object
    properties:
      attendeeStatus:
        $ref: "#/definitions/attendeeStatus"
        x-omitempty: false
      attendee:
        type: string
        x-omtempty: false
  attendeeList:
    type: object
    properties:
      attending:
        type: array
        items:
          $ref: "#/definitions/userID"
      pending:
        type: array
        items:
          $ref: "#/definitions/userID"

securityDefinitions:
  cookieSession:
    description: |
      Session stored in a cookie.

      (If you're reading this in the API documentation, ignore the
      "query parameter name" below. It is ignored at runtime.)
    name: COOKIE
    type: apiKey
    in: query

paths:
  /user/me:
    get:
      summary: Get the current user's information
      description: If user is not logged in, an error response is returned.
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/user"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of the desired user
    get:
      summary: Get the specified user's information
      description: If specified user does not exist, an error is returned.
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/user"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
    patch:
      summary: Patch the specified user
      description: |
        If specified user does not exist or current user is not the specified
        user, an error is returned.
      parameters:
        - in: body
          name: updatedUser
          description: Updated user information
          schema:
            $ref: "#/definitions/user"
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/user"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
  /user/logout:
    get:
      summary: Log out the user
      responses:
        204:
          description: Remove session cookie and redirect to home page.
  /user/facebook/auth:
    get:
      summary: Facebook OAuth login
      description: Start a Facebook OAuth login flow here.
      responses:
        303:
          description: Redirect to Facebook login prompt.
          headers:
            Location:
              type: string
              description: Redirect URL
  /user/facebook/redirect:
    get:
      parameters:
        - name: code
          in: query
          type: string
          required: true
          description: Authorization code from Facebook
        - name: state
          in: query
          type: string
          required: true
          description: Nonce state from Facebook
        - name: __trampoline
          in: query
          type: string
          description: Work around for same-site cookie. Do not set
      summary: Facebook OAuth redirect
      description: If authentication fails, the user is not logged in.
      produces:
        - text/html
      responses:
        200:
          description: Simple HTML file that will redirect user to the home page.
          schema:
            type: string
        303:
          description: Redirect to home page.
          headers:
            Location:
              type: string
              description: Redirect URL
  /user/google/auth:
    get:
      summary: Google OAuth login
      description: Start a Google OAuth login flow here.
      responses:
        303:
          description: Redirect to Google login prompt.
          headers:
            Location:
              type: string
              description: Redirect URL
  /user/google/redirect:
    get:
      parameters:
        - name: code
          in: query
          type: string
          required: true
          description: Authorization code from Google
        - name: state
          in: query
          type: string
          required: true
          description: Nonce state from Google
        - name: __trampoline
          in: query
          type: string
          description: Work around for same-site cookie. Do not set
      summary: Google OAuth redirect
      description: If authentication fails, the user is not logged in.
      produces:
        - text/html
      responses:
        200:
          description: Simple HTML file that will redirect user to the home page.
          schema:
            type: string
        303:
          description: Redirect to home page.
          headers:
            Location:
              type: string
              description: Redirect URL
  /meetup:
    get:
      parameters:
        - name: lat
          in: query
          required: true
          type: number
          minimum: -90
          maximum: 90
          description: The latitude of the center of search
        - name: lon
          in: query
          required: true
          type: number
          minimum: -180
          maximum: 180
          description: The longitude of the center of search
        - name: radius
          in: query
          required: true
          type: number
          minimum: 0
          description: Desired search radius (kilometers)
        - name: tags
          in: query
          type: array
          items:
            type: string
          description: Interests to search for
      summary: Get the list of in-person meetups
      description: If the required parameters were not specified correctly, an error is returned
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/meetup"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
    post:
      summary: Post a new meetup
      parameters:
        - in: body
          name: meetup
          description: The meetup to create
          schema:
            $ref: "#/definitions/meetupRequestBody"
      security:
        - cookieSession: []
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/meetup"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
  /meetup/remote:
    get:
      parameters:
        - name: tags
          in: query
          type: array
          items:
            type: string
          description: Interests to search for
      summary: Get the list of remote meetups
      description: If the required parameters were not specified correctly, an error is returned
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/meetup"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
  /meetup/{id}:
    parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of the desired meetup
    get:
      summary: Get the specified meetup's information
      description: If the specified meetup does not exist, an error is returned
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/meetup"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
    patch:
      summary: Patch the specified meetup
      parameters:
        - in: body
          name: meetup
          description: The updated meetup information
          schema:
            $ref: "#/definitions/meetupRequestBody"
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/meetup"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
    delete:
      summary: Delete the specified meetup
      description: If the specified meetup does not exist, an error is returned
      security:
        - cookieSession: []
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
  /meetup/{id}/attendee:
    parameters:
      - name: id
        in: path
        required: true
        type: string
        description: ID of the desired meetup
    get:
      summary: Get list of attending and pending attendees for a specified meetup
      description: If the specified meetup does not exist, an error is returned
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/attendeeList"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
    post:
      summary: Post the current user's attendee status (to "pending") for the specified meetup
      description: If the specified meetup does not exist, an error is returned
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/attendeeStatus"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
    patch:
      summary: Patch the current user's attendee status for the specified meetup
      description: If the specified meetup does not exist, an error is returned
      parameters:
        - in: body
          name: patchMeetupAttendeeBody
          description: The id of the user being patched, plus their attendee status. Let attendee be empty if patching current user
          schema:
            $ref: "#/definitions/patchMeetupAttendeeBody"
      security:
        - cookieSession: []
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/attendeeStatus"
        400:
          description: Bad Request
          schema:
            $ref: "#/definitions/error"
        403:
          description: Forbidden
          schema:
            $ref: "#/definitions/error"
        404:
          description: Not found
          schema:
            $ref: "#/definitions/error"
